(function() {
  var Map;

  Map = (function() {
    var POINT_DENSITY, REQUEST_CHUNKS, allElevations, createHeatmapLayer, flattenElevationData, getElevationData, getGeoLocation, heatmapLayer, latLngPoints, map, onMapReady, renderHeatmap, setLatLngPoints, setWeightedLocations, updateHeatmapLayerData, weightedLocations;

    POINT_DENSITY = 1024;

    REQUEST_CHUNKS = 6;

    map = null;

    latLngPoints = [];

    allElevations = [];

    weightedLocations = [];

    heatmapLayer = null;

    function Map() {
      getGeoLocation().then(function(center) {
        var mapOptions;
        mapOptions = {
          center: center,
          zoom: 7,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
        return google.maps.event.addListener(map, "idle", onMapReady);
      });
    }

    getGeoLocation = function() {
      var deferred;
      deferred = Q.defer();
      if (navigator.geolocation) {
        console.log("Getting geolocation data...");
        navigator.geolocation.getCurrentPosition(function(position) {
          return deferred.resolve(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
        }, function(error) {
          console.log("Error (" + error.code + "): " + error.message);
          return deferred.resolve(new google.maps.LatLng(33.582807, -117.727651));
        }, {
          enableHighAccuracy: true,
          timeout: 5000,
          maximumAge: 0
        });
      } else {
        console.log("navigator.geolocation not available; using default location");
        deferred.resolve(new google.maps.LatLng(33.582807, -117.727651));
      }
      return deferred.promise;
    };

    onMapReady = function() {
      setLatLngPoints();
      return getElevationData();
    };

    setLatLngPoints = function() {
      var bottom, j, lat, latFactor, latSpread, left, lng, lngFactor, lngSpread, maxPoints, ref, results, right, top;
      top = map.getBounds().getNorthEast().lat();
      right = map.getBounds().getNorthEast().lng();
      bottom = map.getBounds().getSouthWest().lat();
      left = map.getBounds().getSouthWest().lng();
      latSpread = Math.abs(top - bottom);
      lngSpread = Math.abs(left - right);
      latFactor = latSpread / Math.sqrt(POINT_DENSITY);
      lngFactor = lngSpread / Math.sqrt(POINT_DENSITY);
      maxPoints = Math.ceil(Math.sqrt(POINT_DENSITY));
      latLngPoints = [];
      results = [];
      for (lat = j = 0, ref = maxPoints; 0 <= ref ? j <= ref : j >= ref; lat = 0 <= ref ? ++j : --j) {
        results.push((function() {
          var k, ref1, results1;
          results1 = [];
          for (lng = k = 0, ref1 = maxPoints; 0 <= ref1 ? k <= ref1 : k >= ref1; lng = 0 <= ref1 ? ++k : --k) {
            results1.push(latLngPoints.push(new google.maps.LatLng(top - (lat * latFactor), left + (lng * lngFactor))));
          }
          return results1;
        })());
      }
      return results;
    };

    getElevationData = function(step) {
      var begin, chunkSize, elevationService, end, locationElevationRequestChunk;
      if (step == null) {
        step = 0;
      }
      chunkSize = Math.ceil(latLngPoints.length / REQUEST_CHUNKS);
      begin = step * (chunkSize + 1);
      end = (step + 1) * (chunkSize + 1);
      if (begin > POINT_DENSITY) {
        flattenElevationData();
        setWeightedLocations();
        renderHeatmap();
        return;
      }
      elevationService = new google.maps.ElevationService();
      locationElevationRequestChunk = {
        locations: latLngPoints.slice(begin, end)
      };
      return elevationService.getElevationForLocations(locationElevationRequestChunk, function(result, status) {
        if (status === google.maps.ElevationStatus.OK) {
          allElevations.push(result);
          return getElevationData(step + 1);
        } else {
          return console.log("Error: " + status);
        }
      });
    };

    flattenElevationData = function() {
      return allElevations = $.map(allElevations, function(i) {
        return i;
      });
    };

    setWeightedLocations = function() {
      var item, j, len, results;
      weightedLocations = [];
      results = [];
      for (j = 0, len = allElevations.length; j < len; j++) {
        item = allElevations[j];
        if (item.elevation > 0) {
          results.push(weightedLocations.push({
            location: item.location,
            weight: item.elevation
          }));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    renderHeatmap = function() {
      if (heatmapLayer) {
        return updateHeatmapLayerData();
      } else {
        return createHeatmapLayer();
      }
    };

    updateHeatmapLayerData = function() {
      return heatmapLayer.setData(weightedLocations);
    };

    createHeatmapLayer = function() {
      var heatmapLayerOptions;
      heatmapLayerOptions = {
        data: weightedLocations,
        gradient: ["rgba(255, 255, 255, 0)", "rgba(249, 107, 107, 1)", "rgba(249, 187, 107, 1)", "rgba(249, 249, 107, 1)", "rgba(107, 249, 107, 1)", "rgba(107, 107, 249, 1)", "rgba(171, 107, 249, 1)", "rgba(249, 107, 249, 1)"],
        map: map,
        radius: 50
      };
      return heatmapLayer = new google.maps.visualization.HeatmapLayer(heatmapLayerOptions);
    };

    return Map;

  })();

  $(document).ready((function(_this) {
    return function() {
      if (_this.app == null) {
        _this.app = {};
      }
      return _this.app.map = new Map;
    };
  })(this));

}).call(this);
