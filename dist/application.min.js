(function() {


}).call(this);

(function() {


}).call(this);

(function() {
  var Map;

  Map = (function() {
    var POINT_DENSITY, REQUEST_CHUNKS, createHeatmapLayer, getWeightedLocations, onMapReady, recursivleyGetElevationData, renderHeatmap, updateHeatmapLayerData, world;

    POINT_DENSITY = 900;

    REQUEST_CHUNKS = 6;

    world = {
      map: null,
      latLngPoints: [],
      elevations: [],
      weightedLocations: []
    };

    function Map() {
      var center, mapOptions;
      center = new google.maps.LatLng(36.556386, -117.015124);
      mapOptions = {
        center: center,
        zoom: 7,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      world.map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
      google.maps.event.addListener(world.map, "idle", onMapReady);
    }

    onMapReady = function() {
      var bottom, j, k, lat, latFactor, latSpread, left, lng, lngFactor, lngSpread, points, ref, ref1, right, top;
      top = world.map.getBounds().getNorthEast().lat();
      right = world.map.getBounds().getNorthEast().lng();
      bottom = world.map.getBounds().getSouthWest().lat();
      left = world.map.getBounds().getSouthWest().lng();
      latSpread = Math.abs(top - bottom);
      lngSpread = Math.abs(left - right);
      latFactor = latSpread / Math.sqrt(POINT_DENSITY);
      lngFactor = lngSpread / Math.sqrt(POINT_DENSITY);
      points = Math.ceil(Math.sqrt(POINT_DENSITY));
      world.latLngPoints = [];
      for (lat = j = 0, ref = points; 0 <= ref ? j <= ref : j >= ref; lat = 0 <= ref ? ++j : --j) {
        for (lng = k = 0, ref1 = points; 0 <= ref1 ? k <= ref1 : k >= ref1; lng = 0 <= ref1 ? ++k : --k) {
          world.latLngPoints.push(new google.maps.LatLng(top - (lat * latFactor), left + (lng * lngFactor)));
        }
      }
      return recursivleyGetElevationData();
    };

    getWeightedLocations = function() {
      var elevations, item, j, len, ref;
      world.weightedLocations = [];
      elevations = [];
      ref = world.elevations;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        elevations.push(item.elevation);
        if (item.elevation > 0) {
          world.weightedLocations.push({
            location: item.location,
            weight: item.elevation
          });
        }
      }
      return console.log(world.weightedLocations);
    };

    recursivleyGetElevationData = function(step) {
      var begin, chunks, elevationService, end, locationElevationRequestChunk, points;
      if (step == null) {
        step = 0;
      }
      chunks = Math.ceil(world.latLngPoints.length / REQUEST_CHUNKS);
      begin = step * (chunks + 1);
      end = (step + 1) * (chunks + 1);
      console.log(begin + " - " + end);
      if (begin > POINT_DENSITY) {
        world.elevations = $.map(world.elevations, function(i) {
          return i;
        });
        getWeightedLocations();
        renderHeatmap();
        return;
      }
      points = world.latLngPoints.slice(begin, end);
      elevationService = new google.maps.ElevationService();
      locationElevationRequestChunk = {
        locations: points
      };
      return elevationService.getElevationForLocations(locationElevationRequestChunk, function(result, status) {
        if (status === google.maps.ElevationStatus.OK) {
          console.log("OK");
          world.elevations.push(result);
          return recursivleyGetElevationData(step + 1);
        } else {
          return console.log("NOT OK: " + status);
        }
      });
    };

    renderHeatmap = function() {
      if (world.heatmapLayer) {
        return updateHeatmapLayerData();
      } else {
        return createHeatmapLayer();
      }
    };

    createHeatmapLayer = function() {
      var heatmapLayerOptions;
      heatmapLayerOptions = {
        data: world.weightedLocations,
        gradient: ["rgba(255, 255, 255, 0)", "rgba(249, 107, 107, 1)", "rgba(249, 187, 107, 1)", "rgba(249, 249, 107, 1)", "rgba(107, 249, 107, 1)", "rgba(107, 107, 249, 1)", "rgba(171, 107, 249, 1)", "rgba(249, 107, 249, 1)"],
        map: world.map,
        radius: 80
      };
      return world.heatmapLayer = new google.maps.visualization.HeatmapLayer(heatmapLayerOptions);
    };

    updateHeatmapLayerData = function() {
      return world.heatmapLayer.setData(world.weightedLocations);
    };

    return Map;

  })();

  $(document).ready((function(_this) {
    return function() {
      if (_this.app == null) {
        _this.app = {};
      }
      return _this.app.map = new Map;
    };
  })(this));

}).call(this);
